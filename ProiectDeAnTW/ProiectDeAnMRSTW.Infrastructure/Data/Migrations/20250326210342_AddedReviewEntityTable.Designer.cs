// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProiectDeAnMRSTW.Infrastructure.Data;

#nullable disable

namespace ProiectDeAnTW.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250326210342_AddedReviewEntityTable")]
    partial class AddedReviewEntityTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Abstractions.Aliment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPageLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aliment");

                    b.HasDiscriminator().HasValue("Aliment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.CategorieAliment", b =>
                {
                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category");

                    b.ToTable("CategorieAliment");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.CarneSiMezeluri", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("CarneSiMezeluri");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.Dulciuri", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("Dulciuri");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.Fructe", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("Fructe");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.Legume", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("Legume");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.Paste", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("Paste");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Products.Peste", b =>
                {
                    b.HasBaseType("ProiectDeAnMRSTW.Domain.Abstractions.Aliment");

                    b.HasDiscriminator().HasValue("Peste");
                });

            modelBuilder.Entity("ProiectDeAnMRSTW.Domain.Reviews.Review", b =>
                {
                    b.OwnsOne("ProiectDeAnMRSTW.Domain.Reviews.Comment", "Comment", b1 =>
                        {
                            b1.Property<int>("ReviewId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Comment");

                            b1.HasKey("ReviewId");

                            b1.ToTable("reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.OwnsOne("ProiectDeAnMRSTW.Domain.Reviews.Rating", "Rating", b1 =>
                        {
                            b1.Property<int>("ReviewId")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Rating");

                            b1.HasKey("ReviewId");

                            b1.ToTable("reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Comment")
                        .IsRequired();

                    b.Navigation("Rating")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
