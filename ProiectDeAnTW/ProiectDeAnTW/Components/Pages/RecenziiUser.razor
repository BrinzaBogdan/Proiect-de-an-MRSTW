@page "/RecenziiUser"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ProiectDeAnMRSTW.Domain.Reviews
@using ProiectDeAnTW.Components.Layout
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using ProiectDeAnTW.Interfaces
@using ProiectDeAnTW.Models
@* @layout MainLayout *@
@inject IJSRuntime JS
@inject ILogger<RecenziiUser> Logger
@inject IReviewService ReviewService

<html lang="ro">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recenzie Produs</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
        }
        .review-container {
            max-width: 600px;
            margin: 50px auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        .review-form {
            max-width: 500px;
            margin: 50px auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }
        .star-rating {
            direction: rtl;
            display: inline-block;
            cursor: pointer;
        }

        .star-rating input {
            display: none;
        }

        .star-rating label {
            color: #ddd;
            font-size: 24px;
            padding: 0 2px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .star-rating label:hover,
        .star-rating label:hover ~ label,
        .star-rating input:checked ~ label {
            color: #ffc107;
        }

    </style>
</head>
<body>

    
 <div class="container">
        <div class="review-form">
            <h2 class="text-center">Lasă o recenzie</h2>
            <EditForm Model="@NewReview" method="post" OnValidSubmit="SalveazaRecenzia" FormName="RecenzieUser" >
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Mesaj</label>
                    <InputTextArea class="form-control" @bind-Value="NewReview.Comment.Value" required />
                </div>

                <div class="form-group">
                    <label>Rating</label>
                    <InputRadioGroup @bind-Value="NewReview.Rating.Value" class="star-rating animated-stars">
                        <InputRadio id="star5" Value="5" />
                        <label for="star5" class="bi bi-star-fill"></label>
                        <InputRadio id="star4" Value="4" />
                        <label for="star4" class="bi bi-star-fill"></label>
                        <InputRadio id="star3" Value="3" />
                        <label for="star3" class="bi bi-star-fill"></label>
                        <InputRadio id="star2" Value="2" />
                        <label for="star2" class="bi bi-star-fill"></label>
                        <InputRadio id="star1" Value="1" />
                        <label for="star1" class="bi bi-star-fill"></label>
                    </InputRadioGroup>
                </div> 
                
                   
                <button type="submit" class="btn btn-primary mt-3">Trimite Recenzia</button>
            </EditForm>
        </div>
    </div>
    <script>
        document.querySelectorAll('.star-rating:not(.readonly) label').forEach(star => {
            star.addEventListener('click', function() {
                this.style.transform = 'scale(1.2)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 200);
            });
        });
    </script>
</body>
</html> 


@code {
    public ReviewModel NewReview { get; set; } = new ReviewModel();

    public async Task SalveazaRecenzia(EditContext editContext)
    {
        Logger.LogInformation($"NewReview.Comment.Value = {NewReview.Comment.Value}");
        Logger.LogInformation($"NewReview.Rating = {NewReview.Rating}");
        await ReviewService.CreateReview(NewReview);
        NewReview = new ReviewModel();
        StateHasChanged();
    }
}
 






